@startuml
'https://plantuml.com/class-diagram

!theme mars


package ui {

    package home {
        class HomeFragment {
            + onCreateView(): View
            - openLink(pos: int): void
        }
    }

    class MainActivity {
        - {static} ONLINE_TV_DELAY: long

        # onCreate(): void
    }

    class MainActivityViewModel {
        + {static} NETWORK_AVAILABLE: Boolean
        + {static} NETWORK_UNAVAILABLE: Boolean
        - networkAvailability: MutableLiveData<Boolean>
        - networks: List<String>

        + MainActivityViewModel(application: Application)
        + getNetworkAvailability(): LiveData<Boolean>
        - notifyNetworkAvailable(): void
        - notifyNetworkUnavailable(): void
    }

    MainActivity --> MainActivityViewModel

    package episode_list {
        abstract class EpisodeListFragment {
            - subscribeUi(): void
            - subscribeUIToNetworkChange(): void
            - makePlayableEpisodeList(...): List<PlayableEpisode>
            + onDownloadEpisodeClicked(episode: Episode): void
            - makeShareIntent(episode: Episode): Intent
        }
        class EpisodeAdapter {
            + onBindViewHolder(holder: EpisodeHolder, position: int): void
        }
        class EpisodeHolder {
            - nonPlayableText: TextView
            - buttonShare: Button
            - buttonDownload: Button
            - buttonCompleted: ImageButton

            + EpisodeHolder(itemView: View)
            + setDescription(description: String): void
            + setDownloadSituation(downloadState: int): void
            + setCompletedButtonResource(completed: boolean): void
            + setPlayableSituation(nonPlayable: boolean, downloadState: int): voi
        }
        class EpisodeListViewModel {
            + download(episode: Episode): void
            + removeDownload(episode: Episode): void
            + stopDownload(episode: Episode): void
        }

        EpisodeListFragment -> EpisodeAdapter
        EpisodeAdapter --* EpisodeHolder

        EpisodeListFragment --> EpisodeListViewModel
        EpisodeListFragment --> MainActivityViewModel
    }

    package player {
        class PlayerFragment {
            + onViewCreated(): void
        }
        class PlayerViewModel {
            + {static} RES_PLAY_ARROW: int
            + {static} RES_PAUSE_LINES: int
        }

        PlayerFragment --> PlayerViewModel
        PlayerFragment --> MainActivityViewModel
    }
}

MainActivityViewModel -down-> EpisodeRepository
EpisodeListViewModel -down-> EpisodeRepository

class EpisodeRepository {
    - {static} BASE_URL: String
    - {static} FEED_URL: String

    + delete(episode: Episode): void
    + getFromIdAndUpdateDownloadId(id: int, downloadId: int): void
    - updateDBWithItems(items: List<Item>): void
    + download(episode:Episode, applicationContext: Context): void
    + removeDownload(episode:Episode, applicationContext: Context): void
    + stopDownload(episode:Episode, applicationContext: Context): void
}

package service.download {
    class DownloadUtil {
        - STOP_REASON: int
        + {static} addDownload(episode: Episode, context: Context): void
        + {static} stopDownload(episode: Episode, context: Context): void
    }
}

package feed <<Cloud>> {
    class Item {
        - shareLink: String
        - duration: long
        + Item(...)
        + getShareLink(): String
        + getDuration(): long
        + toString(): String
    }
    class Enclosure {
        - url: String
        - type: String
        - length: long
    }
    Item -* Enclosure
}

package db <<Database>> {
    class Episode {
        - shareLink: String
        + Episode(year: int, ...)
        + Episode(other: Episode)
        + getShareLink(): String
        + completes(other: Episode): boolean
        + areContentsComplete(): boolean
        + completeContentsWith(other: Episode): void
        + equals(o: Object): boolean
        + hashCode(): int
        + toString(): String
    }
    class DatabaseConstants {
        + {static} DB_VERSION: int
        + {static} EPISODE_SHARE_LINK_COLUMN: String
    }
    interface EpisodeDao {
        getEpisodesSync(): List<Episode>
    }
    abstract class EpisodeDatabase {
        + {static} getInstance(context: Context): EpisodesDatabase
        - {static} buildDatabase(appContext: Context): EpisodeDatabase
    }

    EpisodeDatabase --> DatabaseConstants
    EpisodeDatabase -> EpisodeDao
    EpisodeDatabase --> Episode
    EpisodeDao -> Episode
}

EpisodeRepository --> service.download
EpisodeRepository --> db
EpisodeRepository --> feed

package utils {
    class PlayableEpisode {
        + {static} RES_PLAY: int
        + {static} RES_PAUSE: int
        + {static} NON_PLAYABLE_CHANGED: String
        + {static} DOWNLOAD_STATE_CHANGED: String
        + {static} DIFF_CALLBACK: DiffUtil.ItemCallback<PlayableEpisode>
        - nonPlayable: boolean
        + PlayableEpisode(episode: Episode)
        + setNonPlayable(nonPlayable: boolean): void
        + isNonPlayable(): boolean
    }
    class YearsData {
        + {static} IMAGE_RES: int
        + {static} getYearImage(): int
    }
}

MainActivityViewModel --> PlayableEpisode
EpisodeAdapter --> PlayableEpisode
EpisodeListFragment --> PlayableEpisode
EpisodeAdapter --> YearsData
@enduml